use shared::*;
use crate::hybrid_integration::HybridGameWorld;
use crate::game::{Player, Mech, Resource, Projectile};
use std::collections::HashMap;
use uuid::Uuid;

/// Modified Game struct that uses the hybrid tile-entity system
pub struct GameHybrid {
    pub players: HashMap<Uuid, Player>,
    pub mechs: HashMap<Uuid, Mech>,
    pub resources: HashMap<Uuid, Resource>,
    pub projectiles: HashMap<Uuid, Projectile>,
    
    // New hybrid world
    pub world: HybridGameWorld,
    
    // Station registry for game logic
    pub station_registry: StationRegistry,
    
    // Mapping from station instance IDs to entity IDs
    station_entities: HashMap<Uuid, Uuid>,
}

impl GameHybrid {
    pub fn new() -> Self {
        let mut game = Self {
            players: HashMap::new(),
            mechs: HashMap::new(),
            resources: HashMap::new(),
            projectiles: HashMap::new(),
            world: HybridGameWorld::new(),
            station_registry: StationRegistry::new(),
            station_entities: HashMap::new(),
        };
        
        game.initialize();
        game
    }
    
    fn initialize(&mut self) {
        // Initialize world with grass
        self.world.initialize_world();
        
        // Create red team mech
        let red_pos = TilePos::new(RED_MECH_SPAWN.0, RED_MECH_SPAWN.1);
        let red_interior = MechLayoutGenerator::generate_interior();
        let (red_mech_id, _red_entity) = self.world.create_mech(red_pos, TeamId::Red, &red_interior);
        
        // Create stations for red mech
        let mut red_stations = Vec::new();
        for (floor_idx, floor) in red_interior.floors.iter().enumerate() {
            for (pos, station_type) in &floor.station_positions {
                red_stations.push((floor_idx as u8, *pos, *station_type));
            }
        }
        
        let created_red = self.world.create_stations_for_mech(red_mech_id, &red_stations);
        
        // Create game mech object
        let mut red_mech_stations = HashMap::new();
        for ((instance_id, entity_id), (_floor, _pos, _stype)) in created_red.iter().zip(red_stations.iter()) {
            self.station_entities.insert(*instance_id, *entity_id);
            if let Ok(station) = self.station_registry.create_station(_stype.clone(), *_floor, *_pos) {
                red_mech_stations.insert(station.id, station);
            }
        }
        
        let red_mech = Mech {
            id: red_mech_id,
            team: TeamId::Red,
            position: red_pos,
            health: MECH_INITIAL_HEALTH,
            max_health: MECH_MAX_HEALTH,
            shield: MECH_INITIAL_SHIELD,
            max_shield: MECH_MAX_SHIELD,
            upgrades: MechUpgrades {
                laser_level: INITIAL_UPGRADE_LEVEL,
                projectile_level: INITIAL_UPGRADE_LEVEL,
                engine_level: INITIAL_UPGRADE_LEVEL,
                shield_level: INITIAL_UPGRADE_LEVEL,
            },
            stations: red_mech_stations,
            interior: red_interior,
            resource_inventory: HashMap::new(),
            velocity: (0.0, 0.0),
            world_position: red_pos.to_world_pos(),
        };
        
        self.mechs.insert(red_mech_id, red_mech);
        
        // Create blue team mech
        let blue_pos = TilePos::new(BLUE_MECH_SPAWN.0, BLUE_MECH_SPAWN.1);
        let blue_interior = MechLayoutGenerator::generate_interior();
        let (blue_mech_id, _blue_entity) = self.world.create_mech(blue_pos, TeamId::Blue, &blue_interior);
        
        // Create stations for blue mech
        let mut blue_stations = Vec::new();
        for (floor_idx, floor) in blue_interior.floors.iter().enumerate() {
            for (pos, station_type) in &floor.station_positions {
                blue_stations.push((floor_idx as u8, *pos, *station_type));
            }
        }
        
        let created_blue = self.world.create_stations_for_mech(blue_mech_id, &blue_stations);
        
        // Create game mech object
        let mut blue_mech_stations = HashMap::new();
        for ((instance_id, entity_id), (_floor, _pos, _stype)) in created_blue.iter().zip(blue_stations.iter()) {
            self.station_entities.insert(*instance_id, *entity_id);
            if let Ok(station) = self.station_registry.create_station(_stype.clone(), *_floor, *_pos) {
                blue_mech_stations.insert(station.id, station);
            }
        }
        
        let blue_mech = Mech {
            id: blue_mech_id,
            team: TeamId::Blue,
            position: blue_pos,
            health: MECH_INITIAL_HEALTH,
            max_health: MECH_MAX_HEALTH,
            shield: MECH_INITIAL_SHIELD,
            max_shield: MECH_MAX_SHIELD,
            upgrades: MechUpgrades {
                laser_level: INITIAL_UPGRADE_LEVEL,
                projectile_level: INITIAL_UPGRADE_LEVEL,
                engine_level: INITIAL_UPGRADE_LEVEL,
                shield_level: INITIAL_UPGRADE_LEVEL,
            },
            stations: blue_mech_stations,
            interior: blue_interior,
            resource_inventory: HashMap::new(),
            velocity: (0.0, 0.0),
            world_position: blue_pos.to_world_pos(),
        };
        
        self.mechs.insert(blue_mech_id, blue_mech);
    }
    
    /// Add a new player using the hybrid system
    pub fn add_player(&mut self, name: String, team: TeamId) -> (Uuid, WorldPos) {
        let player_id = Uuid::new_v4();
        
        // Calculate spawn position
        let spawn_tile = match team {
            TeamId::Red => TilePos::new(
                RED_MECH_SPAWN.0 - 5,
                RED_MECH_SPAWN.1 + MECH_INTERIOR_HEIGHT as i32 / 2
            ),
            TeamId::Blue => TilePos::new(
                BLUE_MECH_SPAWN.0 + MECH_INTERIOR_WIDTH as i32 + 5,
                BLUE_MECH_SPAWN.1 + MECH_INTERIOR_HEIGHT as i32 / 2
            ),
        };
        
        let spawn_pos = spawn_tile.to_world_pos();
        
        let player = Player {
            id: player_id,
            name,
            team,
            location: PlayerLocation::OutsideWorld(spawn_pos),
            carrying_resource: None,
            health: PLAYER_MAX_HEALTH,
        };
        
        self.players.insert(player_id, player);
        
        (player_id, spawn_pos)
    }
    
    /// Get visibility for a player
    pub fn get_player_visibility(&mut self, player_id: Uuid) -> Option<Vec<TilePos>> {
        let player = self.players.get(&player_id)?;
        let player_pos = match player.location {
            PlayerLocation::OutsideWorld(pos) => pos,
            PlayerLocation::InsideMech { pos, .. } => pos,
        };
        
        let visibility = self.world.get_player_visibility(player_id, player_pos);
        Some(visibility.visible_tiles.iter().cloned().collect())
    }
    
    /// Check if a player can move to a position
    pub fn can_player_move_to(&self, player_id: Uuid, target_pos: WorldPos) -> bool {
        self.world.can_move_to(player_id, target_pos)
    }
    
    /// Get tile at a position (for client rendering)
    pub fn get_tile_visual(&self, pos: WorldPos) -> TileVisual {
        match self.world.get_tile_at(pos) {
            Some(TileContent::Static(static_tile)) => {
                match static_tile {
                    StaticTile::MetalFloor => TileVisual::Floor { 
                        material: Material::Metal, 
                        wear: 0 
                    },
                    StaticTile::CargoFloor { wear } => TileVisual::Floor { 
                        material: Material::Metal, 
                        wear 
                    },
                    StaticTile::MetalWall => TileVisual::Wall { 
                        material: Material::Metal 
                    },
                    StaticTile::ReinforcedWall => TileVisual::Wall { 
                        material: Material::Reinforced 
                    },
                    StaticTile::Window { facing } => TileVisual::Window { 
                        broken: false, 
                        facing 
                    },
                    StaticTile::ReinforcedWindow { facing, .. } => TileVisual::Window { 
                        broken: false, 
                        facing 
                    },
                    StaticTile::TransitionZone { transition_type, .. } => {
                        match transition_type {
                            TransitionType::MechEntrance { .. } => TileVisual::Floor {
                                material: Material::Metal,
                                wear: 0,
                            },
                            _ => TileVisual::Floor {
                                material: Material::Metal,
                                wear: 0,
                            },
                        }
                    },
                    _ => TileVisual::Floor { 
                        material: Material::Metal, 
                        wear: 0 
                    },
                }
            }
            Some(TileContent::Entity(entity_id)) => {
                // Check if it's a station
                if let Some(station) = self.world.entities.get_station(entity_id) {
                    TileVisual::Station { 
                        station_type: station.station_type, 
                        active: station.operating 
                    }
                } else {
                    TileVisual::Floor { 
                        material: Material::Metal, 
                        wear: 0 
                    }
                }
            }
            _ => TileVisual::Floor { 
                material: Material::Metal, 
                wear: 0 
            },
        }
    }
}